#include <iostream>
#include <vector>
#include <omp.h>
#include <queue>
using namespace std;

class Graph{
    int V;
    vector<vector<int>> adj;
    public:
        Graph(int V):V(V),adj(V) {}
        
        void addEdge(int v,int w){
            adj[v].push_back(w);
        }
        
        void parallelDFS(int v,vector<bool> vis){
            vis[v]=true;
            cout<<v<<" ";
            #pragma omp parallel for
            for(int i=0;i<adj[v].size();i++){
                if(!vis[adj[v][i]])
                    parallelDFS(adj[v][i],vis);
            }
        }
        
        void parallelBFS(int s) {
    vector<bool> vis(V, false);
    queue<int> q;
    q.push(s);
    vis[s] = true;
    
    while (!q.empty()) {
        int v;
        #pragma omp critical
        {
            v = q.front();
            q.pop();
        }
        cout << v << " ";

        #pragma omp parallel for
        for (int i = 0; i < adj[v].size(); i++) {
            int u = adj[v][i];
            if (!vis[u]) {
                #pragma omp critical
                {
                    vis[u] = true;
                    q.push(u);
                }
            }
        }
    }
}


};
int main(){
    Graph g(7);
    g.addEdge(0,1);
    g.addEdge(0,2);
    g.addEdge(1,3);
    g.addEdge(1,4);
    g.addEdge(2,5);
    g.addEdge(2,6);
    
    vector<bool> vis(7,false);
    cout<<"DFS:";
    g.parallelDFS(0,vis);
    cout<<"\nBFS: "; g.parallelBFS(0); cout<<"\n";
}




cd Desktop
g++ -fopenmp pr1.cpp -o pr1
./pr1